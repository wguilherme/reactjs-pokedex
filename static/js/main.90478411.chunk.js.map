{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","imgSrc","this","props","id","slice","className","src","alt","name","type","exp","Component","Pokedex","title","isWinner","pokemon","map","p","base_experience","defaultProps","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","console","log","exp1","reduce","exp2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90478411.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Pokecard.css'\n\n//\n// const POKE_API = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/'\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/'\n\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number)\n\nclass Pokecard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`\n\n    return (\n\n      <div className=\"Pokecard\">\n        <img src={imgSrc} alt={this.props.name} />\n        <h2 className=\"Pokecard-title\">{this.props.name}</h2>\n        <div>\n          <p className={`Pokecard-type ${this.props.type}`}>Type: {this.props.type}</p>\n          <p className=\"Pokecard-exp\">Exp: {this.props.exp}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from 'react'\nimport Pokecard from './Pokecard'\nimport './Pokedex.css'\n\nexport class Pokedex extends Component {\n\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n      { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n      { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n      { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n      { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n      { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n      { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n      { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n    ]\n\n  }\n\n\n  render() {\n    let title;\n    if (this.props.isWinner) {\n      title = <h1 className=\"Pokedex-winner\"> Winner hand ðŸ¥³</h1>\n    } else {\n      title = <h1 className=\"Pokedex-loser\"> Loser hand ðŸ˜¬</h1>\n    }\n    return (\n      <div className=\"Pokedex\">\n        {title}\n        <h2>Total experience: {this.props.exp}</h2>\n\n        <div className=\"Pokedex-cards\">\n          {this.props.pokemon.map((p) => (\n            <Pokecard id={p.id} name={p.name} type={p.type} exp={p.base_experience} />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Pokedex\n","import React, { Component } from 'react'\nimport Pokedex from './Pokedex';\n\nimport './Pokegame.css'\n\nexport class Pokegame extends Component {\n\n\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n      { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n      { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n      { id: 12, name: 'B`utterfree', type: 'flying', base_experience: 178 },\n      { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n      { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n      { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n      { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n    ]\n\n  }\n\n\n\n  render() {\n    let hand1 = [];\n    let hand2 = [...this.props.pokemon];\n\n    while (hand1.length < hand2.length) {\n      let randIdx = Math.floor(Math.random() * hand2.length);\n      let randPokemon = hand2.splice(randIdx, 1)[0];\n      hand1.push(randPokemon);\n    }\n\n    console.log(hand1);\n    console.log(hand2);\n\n    let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n    let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\n\n    return (\n      <div>\n        <h1 className=\"Pokegame-header\">Welcome to Pokedex Battle!</h1>\n        <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\n        <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\n      </div>\n    )\n  }\n}\n\nexport default Pokegame\n","import React from 'react';\nimport './App.css';\nimport Pokegame from './Pokegame'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Pokegame />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}